
### Variables
CLUSTER_NAME=example

### saml2aws
# please set SAML2AWS_LOGIN_CHECK true or false to .zshrc.local
function login_check () {
 if "${SAML2AWS_LOGIN_CHECK}";then
   if which saml2aws; then
     saml2aws login
   fi
 fi
}

### bastion
function set_bastion_id () {
  if login_check; then
    ENV_SERVICE=$(aws ecs list-services --cluster ${CLUSTER_NAME} | jq -r '.serviceArns[]' | awk -F'/' '{print $(NF-0)}' | peco --prompt "踏み台コンテナを選択しようず🍣 ")
    TASK_ID=$(aws ecs list-tasks --cluster ${CLUSTER_NAME} --service-name ${ENV_SERVICE} --query "taskArns[0]" --output text --region ap-northeast-1 | awk -F '/' '{print $3}')
    CONTAINER_ID=$(aws ecs describe-tasks --cluster ${CLUSTER_NAME} --task ${TASK_ID} --region ap-northeast-1 | jq -r --arg CONTAINER_NAME bastion '.tasks[0].containers[].runtimeId')

  fi
}

function ssm_bastion () {
  set_bastion_id && aws ssm start-session --target ecs:${CLUSTER_NAME}_${TASK_ID}_${CONTAINER_ID}
}

### ec2
function ssm_ec2 () {
  if login_check; then
    EC2=$(aws ec2 describe-instances --output=text \
      --query 'Reservations[].Instances[].{id:InstanceId,ip:PrivateIpAddress,name:Tags[?Key==`Name`].Value|[0]}' \
      | peco --prompt "Select EC2:" | cut -f -1)
  fi

  if [ -n "${EC2}" ];then
    aws ssm start-session --target ${EC2}
  fi

}


function ssm_redis () {
  if login_check; then
    REDIS_ENDPOINT=$(aws elasticache describe-replication-groups --output=text --query='ReplicationGroups[].NodeGroups[].[[`PrimaryEndpoint`,PrimaryEndpoint.Address],[`ReaderEndpoint`,ReaderEndpoint.Address]][]' \
      | peco --prompt "Select Redis Cluster Endpoint:" | cut -f 2)
    

    if set_bastion_id;then
      aws ssm start-session --target ecs:${CLUSTER_NAME}_${TASK_ID}_${CONTAINER_ID} \
        --document-name AWS-StartPortForwardingSessionToRemoteHost \
        --parameters "{\"host\":[\"${REDIS_ENDPOINT}\"],\"portNumber\":[\"6379\"], \"localPortNumber\":[\"6379\"]}"
    fi
  fi
}

### Aurora
function ssm_aurora () {
  if set_bastion_id;then
    AURORA_ENDPOINT=$(aws rds describe-db-cluster-endpoints --output=text \
      --query='DBClusterEndpoints[].[EndpointType,Endpoint]' \
      | peco --prompt "Select Aurora Endpoint:" | cut -f 2)

    SESSION_COUNT=$(ps aux | grep "aws ssm start-session" | grep -v grep | wc -l | sed 's/ //g')
    DB_LOCAL_PORT=$(expr 3306 + ${SESSION_COUNT})
    echo "\n---\nConnect to ${AURORA_ENDPOINT}.\nPlease run 'mysql -h 127.0.0.1 -p -P ${DB_LOCAL_PORT} -u'"
    aws ssm start-session --target ecs:${CLUSTER_NAME}_${TASK_ID}_${CONTAINER_ID} \
     --document-name AWS-StartPortForwardingSessionToRemoteHost \
     --parameters "{\"host\":[\"${AURORA_ENDPOINT}\"],\"portNumber\":[\"3306\"], \"localPortNumber\":[\"${DB_LOCAL_PORT}\"]}"
  fi
}

### Update
function brew_update () {
    cd ${HOME}/ghq/github.com/inamuu/dotfiles
    git pull
    brew bundle
    git diff --quiet
    if [ $? -ne 0 ];then
        git add .
        git commit -m "brew update $(date +%Y%m%d)"
        git push -u origin master
    fi
}

function tfenv_latest_install () {
    latest_terraform=$(tfenv list-remote | egrep "^[0-9]\.[0-9]\.[0-9]$" | head -1)
    tfenv install ${latest_terraform}
    if [ -f ".terraform-version" ];then
        echo ${latest_terraform} >| .terraform-version
    fi
}

### Terraform
function terraform_tfdel () {
  if [ -f ".terraform.lock.hcl" ];then
      rm -f .terraform.lock.hcl
  fi
  if [ -d ".terraform" ];then
      rm -rf  .terraform
  fi
}

